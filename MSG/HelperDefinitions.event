#ifndef MSG_HELPER_DEFINITIONS_EVENT
#define MSG_HELPER_DEFINITIONS_EVENT

#include "eastdlib.event"
#include "Extensions/Hack Installation.txt"

#ifndef _FE8_
	ERROR _file_ should be assembled for FE8
#endif // _FE8_

#include "CoreDefinitions.event"

#define prGetItemIdROMStruct 0x080177B0

#define prGetItemHPBonus     0x080163F0
#define prGetItemPowBonus    0x08016420
#define prGetItemSklBonus    0x08016450
#define prGetItemSpdBonus    0x08016480
#define prGetItemDefBonus    0x080164B0
#define prGetItemResBonus    0x080164E0
#define prGetItemLckBonus    0x08016510

#define prGetUnitEquipped  0x08016B28

#define rArgument "SHORT 0x1C10 0x4770"
#define rCurrent "SHORT 0x4770 0x46C0"
#define rForWordAt(aOffset) "SHORT 0x4B01 0x58C9 0xE002 0x46C0; WORD aOffset"
#define rForShortAt(aOffset) "SHORT 0x4B01 0x5AC9 0xE002 0x46C0; WORD aOffset"
#define rForByteAt(aOffset) "SHORT 0x4B01 0x5CC9 0xE002 0x46C0; WORD aOffset"
#define rForConstant(aValue) "SHORT 0x4900 0xE001; WORD aValue"
#define rForResultOf(aprRoutine) "SHORT 0xB570 0x4B09 0x2401 0x4063 0x46A6 0x1C04 0x1C0D 0x1C16 0x44FE 0x4718 0x1C03 0x1C20 0x1C29 0x1C32 0x1C19 0xBC70 0xBC08 0x469E 0xE002 0x46C0; POIN aprRoutine"
#define rForResultOfExt(aprRoutine) "SHORT 0xB570 0x4B0A 0x2401 0x4063 0x46A6 0x1C04 0x1C0D 0x1C16 0x1C08 0x1C11 0x44FE 0x4718 0x1C03 0x1C20 0x1C29 0x1C32 0x1C19 0xBC70 0xBC08 0x469E 0xE002 0x46C0; POIN aprRoutine"
#define rForArgument "SHORT 0x1C11 0x46C0"
#define rWithWordAt(aOffset) "SHORT 0x4B01 0x58CA 0xE002 0x46C0; WORD aOffset"
#define rWithUShortAt(aOffset) "SHORT 0x4B01 0x5ACA 0xE002 0x46C0; WORD aOffset"
#define rWithSShortAt(aOffset) "SHORT 0x4B01 0x5ECA 0xE002 0x46C0; WORD aOffset"
#define rWithUByteAt(aOffset) "SHORT 0x4B01 0x5CCA 0xE002 0x46C0; WORD aOffset"
#define rWithSByteAt(aOffset) "SHORT 0x4B01 0x56CA 0xE002 0x46C0; WORD aOffset"
#define rWithConstant(aValue) "SHORT 0x4A00 0xE001; WORD aValue"
#define rWithResultOf(aprRoutine) "SHORT 0xB570 0x4B09 0x2401 0x4063 0x46A6 0x1C04 0x1C0D 0x1C16 0x44FE 0x4718 0x1C03 0x1C20 0x1C29 0x1C32 0x1C1A 0xBC70 0xBC08 0x469E 0xE002 0x46C0; POIN aprRoutine"
#define rWithResultOfExt(aprRoutine) "SHORT 0xB570 0x4B0A 0x2401 0x4063 0x46A6 0x1C04 0x1C0D 0x1C16 0x1C08 0x1C11 0x44FE 0x4718 0x1C03 0x1C20 0x1C29 0x1C32 0x1C1A 0xBC70 0xBC08 0x469E 0xE002 0x46C0; POIN aprRoutine"
#define rWithSubject "SHORT 0x1C0A 0x46C0"
#define rForEachUnitInRange(aMinR, aMaxR) "rWithConstant(aMinR | (aMaxR<<16)); SHORT 0xB5F0 0x1C06 0x1C0F 0x1C15 0xF000 0xF83E 0x21FF 0x002A 0x400A 0x0C2B 0x400B 0x2010 0x5638 0x2111 0x5679 0xF000 0xF83B 0x4815 0x2502 0x5F45 0x3D01 0x2D00 0xDB20 0x4812 0x2400 0x5F04 0x3C01 0x2C00 0xDBF6 0x00A9 0x480F 0x6800 0x1840 0x6800 0x1900 0x7800 0x2800 0xD0F3 0x480C 0x6800 0x1840 0x6800 0x1900 0x7800 0x2800 0xD0EB 0x4B09 0x469E 0xF800 0x1C01 0x1C3A 0x1C30 0xF000 0xF82E 0x1C06 0xE7E1 0x1C30 0xBCF0 0xBC02 0x4708 0xE4D4 0x0202 0xE4E4 0x0202 0xE4D8 0x0202 0x9430 0x0801 0xB500 0x480C 0x6800 0x2100 0x4B0B 0x469E 0xF800 0xBD00 0xB5F0 0x4F0A 0x1C14 0x1C05 0x1C0E 0x1C1A 0x2301 0x46BE 0xF800 0x1C28 0x1C31 0x1C22 0x2301 0x425B 0x46BE 0xF800 0xBDF0 0x0000 0xE4E4 0x0202 0x97E4 0x0801 0xAABC 0x0801"
#define rForEachUnitItem "SHORT 0xB570 0x1C06 0x1C0C 0x2500 0x1C20 0x4B09 0x469E 0xF800 0x4070 0x4046 0x4070 0x42B5 0xD007 0x006A 0x321E 0x5AA2 0x1C21 0xF000 0xF807 0x3501 0xE7F5 0xBC70 0xBC02 0x4708 0x79D8 0x0801"
#define rCallOther(aprRoutine) "SHORT 0xB530 0x2501 0x4C03 0x406C 0x46AE 0x44FE 0x4720 0xBC30 0xBC02 0x4708; POIN aprRoutine"
#define rCallExternal(aprRoutine) "SHORT 0x1C08 0x1C11 0x4B01 0x2201 0x4053 0x4718; POIN aprRoutine"
#define rCallResultOf "SHORT 0xB5F0 0x1C05 0x1C0E 0x1C17 0xF000 0xF80C 0x1C04 0x1C28 0x1C31 0x1C3A 0x2301 0x469E 0x44FE 0x4720 0xBCF0 0xBC02 0x4708 0x46C0"
#define rCallExternalResultOf "SHORT 0xB530 0x1C0C 0x1C15 0xF000 0xF80B 0x1C02 0x1C20 0x1C29 0x2301 0x469E 0x44FE 0x4710 0xBC30 0xBC02 0x4708 0x46C0"
#define rCallSequence(aprlRoutineSequence) "SHORT 0xB500 0x4B03 0x469E 0xA303 0xF800 0xBC02 0x4708 0x46C0; POIN prCallSequence aprlRoutineSequence; WORD 0"
#define rIf(aprRoutine) "SHORT 0xB530 0x2401 0x46A6 0x4B08 0x4063 0x1C04 0x1C0D 0x44FE 0x4718 0x4044 0x4060 0x4044 0xD002 0x1C29 0xF000 0xF806 0xBC30 0xBC08 0x4718 0x46C0; POIN aprRoutine"
#define rIfNot(aprRoutine) "SHORT 0xB530 0x2401 0x46A6 0x4B08 0x4063 0x1C04 0x1C0D 0x44FE 0x4718 0x4044 0x4060 0x4044 0xD102 0x1C29 0xF000 0xF806 0xBC30 0xBC08 0x4718 0x46C0; POIN aprRoutine"
#define rWhile(aprRoutine) "SHORT 0xB5F0 0x1C04 0x1C0D 0x2701 0x4E08 0x407E 0x447F 0xE007 0x4044 0x4060 0x4044 0xD005 0x1C29 0xF000 0xF809 0x1C04 0x46BE 0x4730 0xBCF0 0xBC02 0x4708 0x46C0; POIN aprRoutine"
#define rWhileNot(aprRoutine) "SHORT 0xB5F0 0x1C04 0x1C0D 0x2701 0x4E08 0x407E 0x447F 0xE007 0x4044 0x4060 0x4044 0xD105 0x1C29 0xF000 0xF809 0x1C04 0x46BE 0x4730 0xBCF0 0xBC02 0x4708 0x46C0; POIN aprRoutine"
#define rAdd "SHORT 0xB510 0x1C04 0xF000 0xF804 0x1820 0xBC10 0xBC02 0x4708"
#define rSub "SHORT 0xB510 0x1C04 0xF000 0xF804 0x1A20 0xBC10 0xBC02 0x4708"
#define rLShift "SHORT 0xB510 0x1C04 0xF000 0xF806 0x4084 0x1C20 0xBC10 0xBC02 0x4708 0x46C0"
#define rRShift "SHORT 0xB510 0x1C04 0xF000 0xF806 0x4104 0x1C20 0xBC10 0xBC02 0x4708 0x46C0"
#define rMul "SHORT 0xB510 0x1C04 0xF000 0xF804 0x4360 0xBC10 0xBC02 0x4708"
#define rAnd "SHORT 0xB510 0x1C04 0xF000 0xF804 0x4020 0xBC10 0xBC02 0x4708"
#define rOr "SHORT 0xB510 0x1C04 0xF000 0xF804 0x4320 0xBC10 0xBC02 0x4708"
#define rXOr "SHORT 0xB510 0x1C04 0xF000 0xF804 0x4060 0xBC10 0xBC02 0x4708"
#define rNot "SHORT 0xB500 0xF000 0xF803 0x43C0 0xBC02 0x4708"
#define rMinus "SHORT 0xB500 0xF000 0xF803 0x4240 0xBC02 0x4708"
#define rUpperHalfByteOf "SHORT 0xB500 0xF000 0xF805 0x0900 0x230F 0x4018 0xBC02 0x4708"
#define rLowerHalfByteOf "SHORT 0xB500 0xF000 0xF805 0x230F 0x4018 0xBC02 0x4708 0x46C0"

#define rForWordAt(aOffset, arNext)  "rForWordAt(aOffset);  arNext"
#define rForShortAt(aOffset, arNext) "rForShortAt(aOffset); arNext"
#define rForByteAt(aOffset, arNext)  "rForByteAt(aOffset);  arNext"
#define rForConstant(aValue, arNext) "rForConstant(aValue); arNext"
#define rForArgument(arNext)         "rForArgument;         arNext"

#define rForResultOf(aprRoutine, arNext)    "rForResultOf(aprRoutine);    arNext"
#define rForResultOfExt(aprRoutine, arNext) "rForResultOfExt(aprRoutine); arNext"

#define rForEachUnitInRange(aRangeMin, aRangeMax, arNext) "rForEachUnitInRange(aRangeMin, aRangeMax); arNext"
#define rForEachUnitItem(arNext)                          "rForEachUnitItem; arNext"

#define rWithWordAt(aOffset, arNext)   "rWithWordAt(aOffset);   arNext"
#define rWithUShortAt(aOffset, arNext) "rWithUShortAt(aOffset); arNext"
#define rWithSShortAt(aOffset, arNext) "rWithSShortAt(aOffset); arNext"
#define rWithUByteAt(aOffset, arNext)  "rWithUByteAt(aOffset);  arNext"
#define rWithSByteAt(aOffset, arNext)  "rWithSByteAt(aOffset);  arNext"
#define rWithConstant(aValue, arNext)  "rWithConstant(aValue);  arNext"
#define rWithSubject(arNext)           "rWithSubject;           arNext"

#define rWithResultOf(aprRoutine, arNext)    "rWithResultOf(aprRoutine);    arNext"
#define rWithResultOfExt(aprRoutine, arNext) "rWithResultOfExt(aprRoutine); arNext"

#define rWordAt(aOffset)   "rWithWordAt(aOffset);   rArgument"
#define rUShortAt(aOffset) "rWithUShortAt(aOffset); rArgument"
#define rSShortAt(aOffset) "rWithSShortAt(aOffset); rArgument"
#define rUByteAt(aOffset)  "rWithUByteAt(aOffset);  rArgument"
#define rSByteAt(aOffset)  "rWithSByteAt(aOffset);  rArgument"
#define rConstant(aOffset) "rWithConstant(aOffset); rArgument"

#define rCallResultOf(arNext)         "rCallResultOf;         arNext"
#define rCallExternalResultOf(arNext) "rCallExternalResultOf; arNext"

#define rIf(aprCondition, arNext)    "rIf(aprCondition);    arNext"
#define rIfNot(aprCondition, arNext) "rIfNot(aprCondition); arNext"

#define rWhile(aprCondition, arNext)    "rWhile(aprCondition);    arNext"
#define rWhileNot(aprCondition, arNext) "rWhileNot(aprCondition); arNext"

#define rAdd(arNext)    "rAdd;    arNext"
#define rSub(arNext)    "rSub;    arNext"
#define rLShift(arNext) "rLShift; arNext"
#define rRShift(arNext) "rRShift; arNext"
#define rMul(arNext)    "rMul;    arNext"
#define rAnd(arNext)    "rAnd;    arNext"
#define rOr(arNext)     "rOr;     arNext"
#define rXOr(arNext)    "rXOr;    arNext"

#define rNot(arNext)    "rNot;    arNext"
#define rMinus(arNext)  "rMinus;  arNext"

#define rUpperHalfByteOf(arNext) "rUpperHalfByteOf; arNext"
#define rLowerHalfByteOf(arNext) "rLowerHalfByteOf; arNext"

#define rAddConst(aValue)    "rAdd;    rConstant(aValue)"
#define rSubConst(aValue)    "rSub;    rConstant(aValue)"
#define rLShiftConst(aValue) "rLShift; rConstant(aValue)"
#define rRShiftConst(aValue) "rRShift; rConstant(aValue)"
#define rMulConst(aValue)    "rMul;    rConstant(aValue)"
#define rAndConst(aValue)    "rAnd;    rConstant(aValue)"
#define rOrConst(aValue)     "rOr;     rConstant(aValue)"
#define rXOrConst(aValue)    "rXOr;    rConstant(aValue)"

#define rHalved  "rRShiftConst(1)"
#define rDoubled "rLShiftConst(1)"

#define rForUnitEquipped         "rForResultOfExt(prGetUnitEquipped)"
#define rForUnitEquipped(arNext) "rForResultOfExt(prGetUnitEquipped); arNext"

#define rForItemROMStruct         "rForResultOfExt(prGetItemROMStruct)"
#define rForItemROMStruct(arNext) "rForResultOfExt(prGetItemROMStruct); arNext"

#define rIfSubjectIsNotNull            "rIf(prCheckSubjectNotNull)"
#define rIfSubjectIsNotNull(arNext)    "rIfSubjectIsNotNull; arNext"
#define rIfSubjectIsNull               "rIfNot(prCheckSubjectNotNull)"
#define rIfSubjectIsNull(arNext)       "rIfSubjectIsNull; arNext"

#define rIfUnitHasAttribute(aAttribute)            "rWithConstant(aAttribute); rIf(prCheckUnitAttribute)"
#define rIfUnitHasAttribute(aAttribute, arNext)    "rIfUnitHasAttribute(aAttribute); arNext"
#define rIfUnitHasNotAttribute(aAttribute)         "rWithConstant(aAttribute); rIfNot(prCheckUnitAttribute)"
#define rIfUnitHasNotAttribute(aAttribute, arNext) "rIfUnitHasNotAttribute(aAttribute); arNext"

#define rIfUnitHasGuardAI            "rIf(prCheckUnitGuardAI)"
#define rIfUnitHasGuardAI(arNext)    "rIfUnitHasGuardAI;    arNext"
#define rIfUnitHasNotGuardAI         "rIfNot(prCheckUnitGuardAI)"
#define rIfUnitHasNotGuardAI(arNext) "rIfUnitHasNotGuardAI; arNext"

#define rIfUnitHasStatus(aStatusId)            "rWithConstant(aStatusId); rIf(prCheckUnitStatus)"
#define rIfUnitHasStatus(aStatusId, arNext)    "rIfUnitHasStatus(aStatusId); arNext"
#define rIfUnitHasNotStatus(aStatusId)         "rWithConstant(aStatusId); rIfNot(prCheckUnitStatus)"
#define rIfUnitHasNotStatus(aStatusId, arNext) "rIfUnitHasNotStatus(aStatusId); arNext"

#define rIfUnitHasState(aState)            "rWithConstant(aState); rIf(prCheckUnitState)"
#define rIfUnitHasState(aState, arNext)    "rIfUnitHasState(aState);    arNext"
#define rIfUnitHasNotState(aState)         "rWithConstant(aState); rIfNot(prCheckUnitState)"
#define rIfUnitHasNotState(aState, arNext) "rIfUnitHasNotState(aState); arNext"

#define rIfUnitsAreAllied            "rIf(prCheckUnitsAllied)"
#define rIfUnitsAreAllied(arNext)    "rIfUnitsAreAllied;    arNext"
#define rIfUnitsAreNotAllied         "rIfNot(prCheckUnitsAllied)"
#define rIfUnitsAreNotAllied(arNext) "rIfUnitsAreNotAllied; arNext"

#define rIfUnitHasAllegience(aAllegience)            "rWithConstant(aAllegience); rIf(prCheckUnitAllegience)"
#define rIfUnitHasAllegience(aAllegience, arNext)    "rIfUnitHasAllegience(aAllegience);    arNext"
#define rIfUnitHasNotAllegience(aAllegience)         "rWithConstant(aAllegience); rIfNot(prCheckUnitAllegience)"
#define rIfUnitHasNotAllegience(aAllegience, arNext) "rIfUnitHasNotAllegience(aAllegience); arNext"

#endif // MSG_HELPER_DEFINITIONS_EVENT
